
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

boolean enableNative = false;

if(enableNative) {
	
	apply plugin: 'c'
	apply plugin: 'cpp'
	
	model {
		platforms {
			x64 { architecture "x86_64" }
		}

		repositories {
			libs(PrebuiltLibraries) {
				jvm {
					binaries.withType(SharedLibraryBinary) { sharedLibraryFile = file("./src/cpp/jvmlib/jvm.lib") }
				}
			}
		}

		toolChains {
			visualCpp(VisualCpp) {
				// Specify the installDir if Visual Studio cannot be located
				// installDir "C:/Apps/Microsoft Visual Studio 10.0"
			}
		}
	}

	binaries.all {
		if (toolChain in VisualCpp) {
			cppCompiler.args "/EHsc"
		}
	}

	libraries {
		AutoPilot { targetPlatforms "x64" }
	}

	sources {
		AutoPilot {
			cpp {
				source {
					srcDirs "src/cpp"
					include "**/*.cpp"
				}
				exportedHeaders {
					srcDirs "src/cpp","src/cpp/jvmlib"
					include "**/*.h"
				}
			}
		}
	}

	executables {
		Test {
			targetPlatforms "x64"
			binaries.all { lib libraries.AutoPilot.shared  }
		}
	}

	sources {
		Test {
			cpp {
				source {
					srcDir "src/cpp/demo"
					include "Test.cpp"
				}
				lib library: 'jvm'
			}
		}
	}
}



sourceSets {
	main {
		java { srcDir 'src/java' }
		resources {  srcDir 'src/java' }
	}
	test {
		java { srcDir 'src/java' }
		resources {  srcDir 'src/java' }
	}
}


sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

test {
	testLogging.showStandardStreams = true
	testLogging { events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}

dependencies {

    // Apache Commons:
	compile 'org.apache.commons:commons-collections4:4.+'
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'commons-io:commons-io:2.+'
	compile 'org.apache.commons:commons-math3:3.5'
	compile 'commons-beanutils:commons-beanutils:1.7.0'
	compile 'commons-digester:commons-digester:1.8'
	compile 'commons-logging:commons-logging:1.1.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'

    // csparsej:
	compile 'net.sourceforge.csparsej:csparsej:1.1.1'

    // javaassist:
    compile 'javassist:javassist:3.0'

    // jdepend:
    compile 'jdepend:jdepend:2.9.1'

    // args4j:
	compile 'args4j:args4j:2.0.29'

    // EJML:
	compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24'

    // JTransforms:
    compile 'com.github.rwl:jtransforms:2.4.0'

    // Groovy:
    compile 'org.codehaus.groovy:groovy-all:2.2.2'

    // Trove:
    compile 'net.sf.trove4j:trove4j:3.0.3'

    // Vecmath:
	compile 'java3d:vecmath:1.3.1'

    // guava:
    compile 'com.google.guava:guava:18.0'

    // jzy3d:
	compile 'org.jzy3d:jzy3d-api:0.9.1'

    // openHFT
    compile 'net.openhft:compiler:2.1'
    compile 'net.openhft:lang:6.3.5'
    compile 'net.openhft:affinity:2.0.6'
    compile 'net.openhft:collections:3.0.2'
    compile 'net.openhft:chronicle:3.0.1'

    // Jakson for JSON:
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'

    //compile group: "net.rtlib", name: "RTlib", version: "(,1.0]", changing: true

	//compile group: "net.clearvolume", name: "cleargl", version: "0.9.6", changing: true, transitive: true

    compile ('org.jogamp.gluegen:gluegen-rt:2.1.5'){transitive = true}
    compile ('org.jogamp.gluegen:gluegen-rt:2.1.5:natives-macosx-universal'){transitive = true}
    compile ('org.jogamp.gluegen:gluegen-rt:2.1.5:natives-windows-amd64'){transitive = true}
    compile ('org.jogamp.gluegen:gluegen-rt:2.1.5:natives-linux-amd64'){transitive = true}

    compile ('org.jogamp.jogl:jogl-all:2.1.5'){transitive = true}
    //compile ('org.jogamp.jogl:jogl-all-main:2.3.2'){transitive = true}
    compile ('org.jogamp.jogl:jogl-all:2.1.5:natives-macosx-universal'){transitive = true}
    compile ('org.jogamp.jogl:jogl-all:2.1.5:natives-windows-amd64'){transitive = true}
    compile ('org.jogamp.jogl:jogl-all:2.1.5:natives-linux-amd64'){transitive = true}/**/


	// joptimizer:
	compile ('com.joptimizer:joptimizer:3.4.0')/**/

	// Miglayout:
	compile 'com.miglayout:miglayout:3.7.4'

	// JWave:
	compile 'de.sciss:jwave:1.0.3'

	// Bioformats:
	compile(group: 'ome', name: 'formats-gpl', version: '5.1.0-SNAPSHOT'){
	}

	//JMathPlot:
	compile 'com.github.yannrichet:JMathPlot:1.0.1'

	// RCaller:
	compile 'com.github.jbytecode:RCaller:2.8'

	// JAI:
	compile 'com.github.jai-imageio:jai-imageio-core:1.3.1'
	compile 'com.sun.media:jai-codec:1.1.3'

	// JUnit:
	compile group: 'junit', name: 'junit', version: '4.11'
	testCompile group: 'junit', name: 'junit', version: '4.11'

    // Other provided libs:
	//compile fileTree(dir: './libs/jmathplot/jar', include: '*.jar')
	//compile fileTree(dir: './libs/bioformats/jar', include: '*.jar')
	//compile fileTree(dir: './libs/jai/jar', include: '*.jar')
	//compile fileTree(dir: './libs/jwave/jar', include: '*.jar')
	//compile fileTree(dir: './libs/miglayout/jar', include: '*.jar')
	//compile fileTree(dir: './libs/rcaller/jar', include: '*.jar')
	//compile fileTree(dir: './libs/joptimizer/jar', include: '*.jar')
}

repositories {

	// main repos:
	mavenCentral()
	maven { url "http://oss.sonatype.org/content/groups/public"}
	maven { url "http://mvnrepository.com/artifact" }

	// RTlib:
	maven {url  "http://dl.bintray.com/rtlib/RTlib" }
	maven { url  "http://dl.bintray.com/rtlib/CoreMem" }
	maven { url  "http://dl.bintray.com/rtlib/Halcyon" }
	maven { url  "http://dl.bintray.com/rtlib/Drivers"  }

	// ClearVolume:
	maven { url "http://dl.bintray.com/clearvolume/ClearVolume" }


	// imglib2:
	maven { url  "http://maven.imagej.net/content/repositories/releases" }
	maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
	maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/" }

	// jzy3d:
	maven {url "http://maven.jzy3d.org/releases/"}
	maven {url "http://maven.jzy3d.org/snapshots/"}

	// Bioformats:
	maven {
		url 'http://artifacts.openmicroscopy.org/artifactory/maven/'
	}

	//JAI:
	maven {
		url 'http://repository.jboss.org/nexus/content/repositories/thirdparty-releases/'
	}

}


jar {
	dependsOn configurations.runtime
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest {
		attributes("Class-Path": ".")
		attributes("Main-Class": "autopilot.interfaces.demo.AutoPilotCTest")
	}
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
		attributes("Class-Path": ".")
		attributes("Main-Class": "autopilot.interfaces.demo.AutoPilotCTest")
	}
	baseName = project.name + '-all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}



task cmdlinetool(type:Jar) {
	archiveName = "AutoPilotTool.jar"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar

	manifest {
		attributes("Class-Path": ".", 'Main-Class': 'autopilot.main.AutoPilotToolMain')
	}
	exclude('META-INF/*.SF')
	exclude('META-INF/*.DSA')
	exclude('META-INF/*.RSA')
	
}

task packagenativelib {
	doLast {
		def os = System.getProperty("os.name").toLowerCase()
		if (os.contains("windows"))
		{
			copy
			{
				from('./build/binaries/autoPilotSharedLibrary/')
				into('./build/AutoPilot/')
				include('AutoPilot.dll')
			}

			copy
			{
				from('./src/cpp/')
				into('./build/AutoPilot/')
				include('AutoPilot.h')
			}

			copy
			{
				from('./build/binaries/testExecutable/')
				into('./build/AutoPilot/')
				include('Test.exe')
			}

			/*copy
			 {
			 from('./build/libs/')
			 into('./build/AutoPilot/')
			 include('AutoPilot-???.jar')
			 rename('AutoPilot-.+.jar','AutoPilot.jar')
			 }/**/
		}
	}
}

//packagenativelib.dependsOn(autoPilotSharedLibrary)
//packagenativelib.dependsOn(testExecutable)













